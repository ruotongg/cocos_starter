{"version":3,"sources":["assets\\scripts\\Player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","type","AudioClip","runJumpAction","jumpUp","tween","by","y","easing","jumpDown","sequence","call","playJumpSound","repeatForever","audioEngine","playEffect","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","jumpAction","node","then","start","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","update","dt","Math","abs","x"],"mappings":"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","sourceRoot":"/","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        //主角跳跃高度\r\n        jumpHeight: 0,\r\n        //主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        //最大移动速度\r\n        maxMoveSpeed: 0,\r\n        //加速度\r\n        accel: 0,\r\n        //跳跃音效资源\r\n        jumpAudio:{\r\n            default:null,\r\n            type: cc.AudioClip\r\n        }\r\n    },\r\n\r\n    runJumpAction(){\r\n        //跳跃上升\r\n        var jumpUp = cc.tween().by(this.jumpDuration,{y: this.jumpHeight},{easing: 'sineOut'});\r\n        //下落\r\n        var jumpDown = cc.tween().by(this.jumpDuration,{y: -this.jumpHeight},{easing: 'sineIn'});\r\n\r\n        //创建一个缓动\r\n        var tween=cc.tween()\r\n                    //按jumpUp,jumpDown的顺序执行动作\r\n                    .sequence(jumpUp,jumpDown)\r\n                    //添加一个回调函数，在前面的动作都结束时调用我们定义的 playJumpSound() 方法\r\n                    .call(this.playJumpSound, this);\r\n        //不断重复\r\n        return cc.tween().repeatForever(tween);\r\n    },\r\n\r\n    playJumpSound:function(){\r\n        //调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio,false);\r\n    },\r\n\r\n    onKeyDown(event){\r\n        //set a flag when key pressed\r\n        switch(event.keyCode){\r\n            case cc.macro.KEY.a:\r\n                this.accLeft=true;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight=true;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onKeyUp(event){\r\n        //unset a flag when key released\r\n        switch(event.keyCode){\r\n            case cc.macro.KEY.a:\r\n                this.accLeft=false;\r\n                break;\r\n            case cc.macro.KEY.d:\r\n                this.accRight=false;\r\n                break;\r\n        }\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        //初始化跳跃动作\r\n        var jumpAction=this.runJumpAction();\r\n        cc.tween(this.node).then(jumpAction).start()\r\n\r\n        //加速度方向开关\r\n        this.accLeft=false;\r\n        this.accRight=false;\r\n        //主角当前水平方向速度\r\n        this.xSpeed=0;\r\n\r\n        //初始化键盘输入监听\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown,this);\r\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n    },\r\n\r\n    onDestroy(){\r\n        //取消键盘输入监听\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown,this);\r\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP,this.onKeyUp,this);\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        //根据当前加速度方向每帧更新速度\r\n        if(this.accLeft){\r\n            this.xSpeed -= this.accel*dt;\r\n        }\r\n        else if(this.accRight){\r\n            this.xSpeed += this.accel*dt;\r\n        }\r\n\r\n        // 限制主角的速度不能超过最大值\r\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        //根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed*dt;\r\n    },\r\n});\r\n"]}